# -*- coding: utf-8 -*-
"""mainSite.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gNaqM3y6ENzmXulu5VRwuCwdAiH2xlVX
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install --upgrade --force-reinstall --ignore-installed flask blinker

!pip install pyngrok

# Get your authtoken from https://dashboard.ngrok.com/get-started/your-authtoken.

!ngrok authtoken 2xHaJMqD0WuRLipwYXOkcVHNGqZ_74msEzywNgP7KZMQJwA16

import os
import shutil

os.makedirs('/content/templates', exist_ok=True)
shutil.copy('/content/drive/MyDrive/websit/templates/index.html', '/content/templates/index.html')
shutil.copytree('/content/drive/MyDrive/websit/static', '/content/static', dirs_exist_ok=True)

!ls /content/drive/MyDrive/websit/final_model.h5
!ls /content/templates
!ls /content/static/images
!ls /content/drive/MyDrive/websit/Uploads

!pkill ngrok
!lsof -i :5000 && kill -9 $(lsof -t -i :5000)

from flask import Flask, request, jsonify, render_template
import os
import cv2 as cv
from tensorflow.keras.models import load_model
import numpy as np
from pyngrok import ngrok
import threading

# Disconnect existing tunnels before starting a new one
tunnels = ngrok.get_tunnels()
for tunnel in tunnels:
    ngrok.disconnect(tunnel.public_url)

app = Flask(__name__)
UPLOAD_FOLDER = '/content/drive/MyDrive/websit/Uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_image():
    print('Received upload request')
    if 'image' not in request.files:
        print('No file part in request')
        return jsonify({'message': 'No file part'})

    file = request.files['image']
    if file.filename == '':
        print('No selected file')
        return jsonify({'message': 'No selected file'})

    if file:
        print(f'File received: {file.filename}')
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(file_path)
        print(f'File saved to: {file_path}')

        image = cv.imread(file_path)
        if image is None:
            print('Failed to read image')
            os.remove(file_path)
            return jsonify({'message': 'Failed to read image'})

        image = cv.cvtColor(image, cv.COLOR_BGR2RGB)
        image = cv.resize(image, (64, 64))
        image = image.astype(np.float32) / 255.0

        image_processed = np.expand_dims(image, axis=0)

        # Load the CNN model
        model_path = '/content/drive/MyDrive/websit/final_model.h5'
        print(f'Loading model from: {model_path}')
        try:
            model = load_model(model_path)
            print('Model loaded successfully')
        except Exception as e:
            print(f'Failed to load model: {str(e)}')
            os.remove(file_path)
            return jsonify({'message': f'Failed to load model: {str(e)}'})

        try:
            prediction = model.predict(image_processed)
            res = 'Real' if prediction[0][0] < 0.5 else 'AI Generated'
            print(f'Prediction result: {res}')
        except Exception as e:
            print(f'Prediction failed: {str(e)}')
            os.remove(file_path)
            return jsonify({'message': f'Prediction failed: {str(e)}'})

        os.remove(file_path)
        print('File removed after processing')

        return jsonify({'message': res})

def run_flask():
    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)

public_url = ngrok.connect(5000)
print(f'Public URL: {public_url}')

flask_thread = threading.Thread(target=run_flask)
flask_thread.start()